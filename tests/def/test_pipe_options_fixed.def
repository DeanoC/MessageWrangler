/// Test file for pipe-separated options syntax

/// Base message for all commands
message BaseCommand {
    /// The type of command
    type: enum { Status }
    key: string
}
/// Base message for all replies
message BaseReply {
    /// The status of the command execution
    status: enum {
        Success,
        Failure,
        Pending
    }
    key: string
}

/// Status doesn't have a paremeter it just pings the other side
message Status : BaseCommand {}
/// StatusReplay return a message with name and version of this side
message StatusReply : BaseReply {
    msg: string
}

/// Command the client can send to the server
namespace ClientCommands {
    /// Client to server messages
    message ChangeMode : BaseCommand {
        mode: enum {
            /// Connect to the Unreal target through the server
            Live,
            /// Replay an previous Unreal session recorded by the server
            Replay,
            /// Connect to the Unreal Editor through the server
            Editor
        }
    }

    /// reply with the mode that was set (can be different from the one requested)
    message ChangeModeReply : BaseReply {
        mode: enum {
            /// Connect to the Unreal target through the server
            Live,
            /// Replay an previous Unreal session recorded by the server
            Replay,
            /// Connect to the Unreal Editor through the server
            Editor
        }
    }

    /// Ask the server what modes are currently available
    message ModesAvailable : BaseCommand {}

    /// reply with the modes that are currently available
    message ModesAvailableReply : BaseReply {
        available: options { Live, Replay, Editor }
    }
}